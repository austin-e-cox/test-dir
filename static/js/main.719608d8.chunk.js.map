{"version":3,"sources":["components/Employee.js","components/EmployeeTable.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","firstname","lastname","position","location","sortIndices","arr","len","length","indices","Array","i","sort","a","b","Object","keys","sortedEmployees","fill","entries","map","e","ascending","fromEntries","allAttrs","filter","filteredEmployees","filters","EmployeeTable","state","sortCol","firstnameR","React","createRef","lastnameR","positionR","locationR","getIcon","attr","getStyle","color","sortItems","employees","names","item","ind","isAscending","reverse","sorting","filterRows","data","currentEmployees","forEach","event","target","value","current","name","searchText","setState","stl","toLowerCase","startsWith","className","style","this","onClick","type","size","placeholder","onChange","ref","employee","key","id","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.719608d8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Employee(props) {\n  return (\n    <tr>\n      <td>{props.firstname}</td>\n      <td>{props.lastname}</td>\n      <td>{props.position}</td>\n      <td>{props.location}</td>\n    </tr>\n  );\n}\n\nexport default Employee;","import React, { Component } from \"react\";\nimport sortedEmployees from \"../assets/employees.json\";\nimport Employee from \"./Employee\";\nimport \"./index.css\";\n\nconst sortIndices = (arr) => {\n  var len = arr.length;\n  var indices = new Array(len);\n  for (var i = 0; i < len; ++i) indices[i] = i;\n    indices.sort(function (a, b) { return arr[a] < arr[b] ? -1 : arr[a] > arr[b] ? 1 : 0; });\n  return indices\n  // https://stackoverflow.com/questions/3730510/javascript-sort-array-and-return-an-array-of-indicies-that-indicates-the-positi\n}\n\n// create initial array stating whether each column is ascending or descending and defualt to descending\nlet b = Array(Object.keys(sortedEmployees[0]).length).fill(false)\nlet entries = Object.keys(sortedEmployees[0]).map((e,i) => [e,b[i]]);\nlet ascending = Object.fromEntries(entries);\n\n// create attribute list (ie list of column names)\nlet allAttrs = Object.keys(ascending).filter((e)=>(e !== \"id\"));\n\nlet sortCol = \"\";\nlet filteredEmployees = sortedEmployees;\nlet filters = {\"filter-firstname\":\"\", \"filter-lastname\":\"\", \"filter-position\":\"\", \"filter-location\":\"\"};\n\n// Employee table class. If user clicks header, it sorts by that column\nclass EmployeeTable extends Component {\n  // set the initial state\n  state = {\n    sortedEmployees,\n    filteredEmployees,\n    ascending,\n    sortCol,\n    ...filters\n  };\n\n  firstnameR = React.createRef(\"\");\n  lastnameR = React.createRef(\"\");\n  positionR = React.createRef(\"\");\n  locationR = React.createRef(\"\");\n\n  getIcon = (attr) => {\n    let sortText = \"\";\n    if (this.state.ascending[attr])\n      sortText = \"fas fa-sort-up\";\n    else\n      sortText = \"fas fa-sort-down\";\n    return sortText\n  }\n\n  getStyle = (attr) => {\n    let sortText = \"\";\n    if (this.state.sortCol===attr){\n      sortText =\"blue\";\n    }\n    else\n      sortText = \"black\";\n    return {color:sortText};\n  }\n  \n  // sort the empoyees and set the new sorted employees (and as/decending status) to the component state \n  //   (called when header column is clicked)\n  sortItems = (attr) => {\n    let employees = {};\n    let names = sortedEmployees.map((item) => item[attr]);\n    let inds = sortIndices(names);\n    employees = inds.map((ind) => sortedEmployees[ind]);\n    let isAscending = ascending;\n    if(isAscending[attr] === true){\n      isAscending[attr] = false;\n      employees.reverse();\n    }\n    else{\n      isAscending[attr] = true;\n    }\n    //this.setState({ sortedEmployees:employees, filteredEmployees:employees, ascending:isAscending, sortCol:attr, ...filters });\n    this.sorting=true;\n    this.filterRows({ employees:employees, isAscending:isAscending, sortCol:attr});\n  }\n\n  // filters rows down to what is in the assiciated input box\n  // start with all sorted rows and iteratively filter for each column every time to ensure we pick up all filters\n  filterRows = (data) => {\n    let sortedEmployees;\n    let currentEmployees;\n    let isAscending;\n    let sortCol;\n    if (data) {\n      sortedEmployees = data.employees;\n      currentEmployees = [...sortedEmployees];\n      isAscending = data.isAscending;\n      sortCol = data.sortCol;\n    }\n    else{\n      sortedEmployees = [...this.state.sortedEmployees]\n      currentEmployees = [...sortedEmployees];\n      isAscending = this.state.ascending;\n      sortCol = this.state.sortCol;\n    }\n\n    // loop through each column filter\n    allAttrs.forEach(attr => {\n      let event = {target:{value:this[attr+\"R\"].current.value, name:attr}};\n\n      // Getting the value and name of the input which triggered the change\n      let searchText = event.target.value;\n      if (searchText === \"\"){\n        filters = {...filters, [\"filter-\"+event.target.name]:searchText}\n        this.setState({ ...filters, sortedEmployees:this.state.sortedEmployees, filteredEmployees:currentEmployees, ascending:isAscending, sortCol:sortCol })\n        return\n      }\n      \n      let stl = searchText.toLowerCase();\n      const name = event.target.name;\n      currentEmployees = currentEmployees.filter((e) => e[name].toLowerCase().startsWith(stl))\n      filters = {...filters, [\"filter-\"+event.target.name]:searchText}\n      this.setState({ ...filters, sortedEmployees:this.state.sortedEmployees, filteredEmployees:currentEmployees, ascending:isAscending, sortCol:sortCol })\n    })\n  }\n\n//<i className={(this.state.ascending[\"firstname\"]) ? \"fas fa-sort-up\" : \"fas fa-sort-down\"}+{(this.state.sortCol===\"firstname\" ? \" blue-text\" : \"\")}></i>\n  render() {\n    return(\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th style={this.getStyle(\"firstname\")}>\n              <div onClick={() => this.sortItems(\"firstname\")} >\n                <i className={this.getIcon(\"firstname\")}></i>\n                <div className=\"pr-15\">First name</div>\n              </div>\n              <input value={this.state[\"filter-firstname\"]} name=\"firstname\" type=\"text\" size=\"10\" placeholder=\"filter firstname\"\n                onChange={() => this.filterRows(0)}\n                ref={this.firstnameR} />\n            </th>\n            <th style={this.getStyle(\"lastname\")}>\n              <div onClick={() => this.sortItems(\"lastname\")} >\n                <i className={this.getIcon(\"lastname\")}></i>\n                <div className=\"pr-15\">Last name</div>\n              </div>\n              <input value={this.state[\"filter-lastname\"]} name=\"lastname\" type=\"text\" size=\"10\" placeholder=\"filter lastname\"\n                onChange={() => this.filterRows(0)}\n                ref={this.lastnameR} />\n            </th>            \n            <th style={this.getStyle(\"position\")}>\n              <div onClick={() => this.sortItems(\"position\")} >\n                <i className={this.getIcon(\"position\")}></i>\n                <div className=\"pr-15\">Position</div>\n              </div>\n              <input value={this.state[\"filter-position\"]} name=\"position\" type=\"text\" size=\"10\" placeholder=\"filter position\"\n                onChange={() => this.filterRows(0)}\n                ref={this.positionR} />\n            </th>            \n            <th style={this.getStyle(\"location\")}>\n              <div onClick={() => this.sortItems(\"location\")} >\n                <i className={this.getIcon(\"location\")}></i>\n                <div className=\"pr-15\">Location</div>\n              </div>\n              <input value={this.state[\"filter-location\"]} name=\"location\" type=\"text\" size=\"10\" placeholder=\"filter location\"\n                onChange={() => this.filterRows(0)}\n                ref={this.locationR} />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.filteredEmployees.map(employee => (\n            <Employee\n              key={employee.id}\n              firstname={employee.firstname}\n              lastname={employee.lastname}\n              position={employee.position}\n              location={employee.location}\n            />)\n          )}\n        </tbody>\n      </table>)\n  }\n}\n\nexport default EmployeeTable;","import React from 'react';\nimport './App.css';\nimport EmployeeTable from \"./components/EmployeeTable\";\n\n\nfunction App() {\n  return (\n  <div className=\"container\">\n  <div className=\"row justify-content-center\">\n    <h1 className=\"text-align-center\" style={{\"marginTop\":\"20px\", \"marginBottom\":\"20px\"}}>\n      Employee Details\n    </h1>\n  </div>\n    <EmployeeTable />\n  </div>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}